//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PlayableUntilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PlayableUntil), typeof(System.Object));
		L.RegFunction("SetDirector", SetDirector);
		L.RegFunction("GetDirector", GetDirector);
		L.RegFunction("Play", Play);
		L.RegFunction("New", _CreatePlayableUntil);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreatePlayableUntil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				PlayableUntil obj = new PlayableUntil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: PlayableUntil.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDirector(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayableUntil obj = (PlayableUntil)ToLua.CheckObject<PlayableUntil>(L, 1);
			UnityEngine.Playables.PlayableDirector arg0 = (UnityEngine.Playables.PlayableDirector)ToLua.CheckObject<UnityEngine.Playables.PlayableDirector>(L, 2);
			obj.SetDirector(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDirector(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			PlayableUntil obj = (PlayableUntil)ToLua.CheckObject<PlayableUntil>(L, 1);
			UnityEngine.Playables.PlayableDirector o = obj.GetDirector();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PlayableUntil obj = (PlayableUntil)ToLua.CheckObject<PlayableUntil>(L, 1);
			Cutscene.CommonPlayableAsset arg0 = (Cutscene.CommonPlayableAsset)ToLua.CheckObject<Cutscene.CommonPlayableAsset>(L, 2);
			obj.Play(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

