---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lihangyu.
--- DateTime: 2021/12/15 15:31
---

module("BN.Cutscene", package.seeall)

CutsceneAVProVideoView = class("CutsceneAVProVideoView", BN.ViewBase)


function CutsceneAVProVideoView:GetResourcesPath()
    local resPath = {
        Framework.Resource.BundlePrefabGroup.New("prefabs/function/cutscene/ui/main/cutsceneavprovideoview","CutsceneAVProVideoView")
    }
    return resPath
end

function CutsceneAVProVideoView:GetViewModel()
    return "CutsceneVideoViewModel"
end

function CutsceneAVProVideoView:GetRoot()
    return "POPUP"
end

function CutsceneAVProVideoView:BuildUI()
    local go = self.gameObject
    local controllerGO = self.gameObject:FindChild("panel/AVProVideoController")
    self.controller = PJBN.LuaComponent.GetOrAdd(controllerGO, BN.AVProVideoController)
    local controlModuleGO = self.gameObject:FindChild("panel/MediaRoot")
    self.controller:SetControlModule(controlModuleGO)
    self.controller:AddPrepareCompletedListener(closure(self._OnMediaPrepareCompleted,self))

end

function CutsceneAVProVideoView:_OnMediaPrepareCompleted()
    if self.controller:IsVideoError() then
        printError("Loaded Video Failed")
        self:_EndPlayVideo()
        return
    end
    self.controller:Play()
end

function CutsceneAVProVideoView:BindValues()
    local vm = self.viewModel
    
    self:BindValue(DataBind.BindType.Function, "PlayFullScreenMovie", vm.OnPlayMovieProperty, function()
        local tab = vm.OnPlayMovieProperty()
        local path = tab[1]
        self.closeCallback = tab[2]
        if not path then
            return
        end
        path =string.gsub(path, ".usm", ".mp4") -- 替换视频后缀
        self.controller:SetEndCallback(closure(self._EndPlayVideo,self))
        self.controller:Prepare(path)
    end)

end

function CutsceneAVProVideoView:_EndPlayVideo()
    if self.closeCallback then
        self.closeCallback()
        self.closeCallback = nil
    end
    UIManager:Close('CutsceneAVProVideoView')
end

function CutsceneAVProVideoView:CloseFinished()
    if not self._forceClose then
        if self.closeCallback then
            self.closeCallback()
            self.closeCallback = nil
        end
    end
end
